require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const commands = require('./commands');
const channels = require('./channels');

// –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∏–∂–µ –Ω–∞ —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
const token = process.env.TELEGRAM_BOT_TOKEN;

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'polling' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
const bot = new TelegramBot(token, {polling: true});

let lastMessage = null;
let selectedChannels = new Set();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤ —Å —É—á–µ—Ç–æ–º markdown
function countCharacters(text) {
  if (!text) return 0;
  // –£–±–∏—Ä–∞–µ–º markdown-—Ä–∞–∑–º–µ—Ç–∫—É
  const cleanText = text.replace(/\*|_|`|\[.*?\]|\(.*?\)/g, '');
  return cleanText.length;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_channel
bot.onText(/\/add_channel/, (msg) => {
  commands.addChannel(bot, msg);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
  const isHandled = await commands.handleMessage(bot, msg);
  if (isHandled) return;

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (msg.text && msg.text.startsWith('/')) {
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–∞–ª–æ–≤
  const channelList = channels.getChannels();
  if (!channelList || channelList.length === 0) {
    bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n‚ûï –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π /add_channel');
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
  lastMessage = {
    text: msg.text,
    entities: msg.entities
  };
  selectedChannels.clear();

  const charCount = countCharacters(lastMessage.text);

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
  const channelKeyboard = {
    inline_keyboard: [
      ...channelList.map(channel => [{
        text: `üì¢ ${channel.name}`,
        callback_data: `select_${channel.id}`
      }]),
      [
        { text: 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ', callback_data: 'send' },
        { text: 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ –≤—Å–µ', callback_data: 'send_all' }
      ]
    ]
  };

  await bot.sendMessage(chatId, `üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\nüìä –°–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: ${charCount}`, {
    reply_markup: channelKeyboard
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
bot.on('callback_query', async (query) => {
  try {
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const data = query.data;
    const messageToSend = lastMessage;
    const channelList = channels.getChannels();
    const charCount = countCharacters(messageToSend.text);

    if (!messageToSend) {
      await bot.answerCallbackQuery(query.id, '‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞
    if (data.startsWith('select_')) {
      const channelId = data.split('_')[1];
      // –î–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
      if (selectedChannels.has(channelId)) {
        selectedChannels.delete(channelId);
        await bot.answerCallbackQuery(query.id, '‚ùå –ö–∞–Ω–∞–ª —É–±—Ä–∞–Ω');
      } else {
        selectedChannels.add(channelId);
        await bot.answerCallbackQuery(query.id, '‚úÖ –ö–∞–Ω–∞–ª –≤—ã–±—Ä–∞–Ω');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const newKeyboard = {
        inline_keyboard: [
          ...channelList.map(channel => [{
            text: `${selectedChannels.has(channel.id) ? '‚úÖ' : 'üì¢'} ${channel.name}`,
            callback_data: `select_${channel.id}`
          }]),
          [
            { text: 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ', callback_data: 'send' },
            { text: 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ –≤—Å–µ', callback_data: 'send_all' }
          ]
        ]
      };

      await bot.editMessageReplyMarkup(newKeyboard, {
        chat_id: chatId,
        message_id: messageId
      });
    } 
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    else if (data === 'send') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –∫–∞–Ω–∞–ª
      if (selectedChannels.size === 0) {
        await bot.answerCallbackQuery(query.id, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª');
        return;
      }

      let success = true;
      let successChannels = [];

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
      for (const channelId of selectedChannels) {
        try {
          await bot.sendMessage(channelId, messageToSend.text, {
            entities: messageToSend.entities
          });
          const channel = channelList.find(ch => ch.id === channelId);
          if (channel) {
            successChannels.push(channel.name);
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª ${channelId}:`, error);
          success = false;
        }
      }

      bot.deleteMessage(chatId, messageId);
      await bot.answerCallbackQuery(query.id, success ? '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞–Ω–∞–ª–æ–≤
      if (success) {
        const channelsText = successChannels.length > 1 ? 
          '–∫–∞–Ω–∞–ª—ã: ' + successChannels.join(', ') : 
          '–∫–∞–Ω–∞–ª: ' + successChannels[0];
        await bot.sendMessage(chatId, `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${channelsText}`);
      } else {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
      
      selectedChannels.clear();
    } 
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    else if (data === 'send_all') {
      let success = true;
      let successChannels = [];

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
      for (const channel of channelList) {
        try {
          await bot.sendMessage(channel.id, messageToSend.text, {
            entities: messageToSend.entities
          });
          successChannels.push(channel.name);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª ${channel.id}:`, error);
          success = false;
        }
      }

      bot.deleteMessage(chatId, messageId);
      await bot.answerCallbackQuery(query.id, success ? '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      if (success) {
        await bot.sendMessage(chatId, '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã');
      } else {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
      
      selectedChannels.clear();
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await bot.answerCallbackQuery(query.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
});
