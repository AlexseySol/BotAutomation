// commands.js

const channels = require('./channels');

let addChannelStates = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ID –∫–∞–Ω–∞–ª–∞
function validateChannelId(id) {
  // ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ
  const pattern = /^-100\d+$/;
  return pattern.test(id);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
const addChannel = async (bot, msg) => {
  const chatId = msg.chat.id;
  addChannelStates[chatId] = { step: 'waiting_name' };
  bot.sendMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞:');
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
const handleMessage = async (bot, msg) => {
  const chatId = msg.chat.id;
  const state = addChannelStates[chatId];

  if (!state) {
    return false;
  }

  if (state.step === 'waiting_name') {
    const channelName = msg.text;
    addChannelStates[chatId] = { step: 'waiting_id', channelName };
    bot.sendMessage(chatId, 'üîë –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:');
    return true;
  }

  if (state.step === 'waiting_id') {
    const channelId = msg.text;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID
    if (!validateChannelId(channelId)) {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞!\n\n‚úÖ ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
      return true;
    }

    try {
      channels.addChannel(state.channelName, channelId);
      bot.sendMessage(chatId, '‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
    } catch (error) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞');
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:', error);
    }
    delete addChannelStates[chatId];
    return true;
  }

  return false;
};

module.exports = {
  addChannel,
  handleMessage
};
